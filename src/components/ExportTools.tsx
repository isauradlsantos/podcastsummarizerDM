import React, { useState } from 'react';
import { Download, Copy, FileText, Share } from 'lucide-react';
import { PodcastData } from '../types';

interface ExportToolsProps {
  podcastData: PodcastData;
}

export default function ExportTools({ podcastData }: ExportToolsProps) {
  const [copiedItem, setCopiedItem] = useState<string | null>(null);

  const generateSummaryText = () => {
    const { episode, summary, highlights } = podcastData;
    
    return `# ${episode.title}

## Summary
${summary.overview}

## Key Points
${summary.keyPoints.map((point, index) => `${index + 1}. ${point}`).join('\n')}

## Highlights
${highlights.map((highlight, index) => 
  `${index + 1}. [${highlight.formattedTime}] ${highlight.title}\n   ${highlight.description}`
).join('\n\n')}

Generated by PodcastSummarizer`;
  };

  const generateFullTranscript = () => {
    const { episode, transcript } = podcastData;
    
    return `# ${episode.title} - Full Transcript

${transcript.map(segment => 
  `[${segment.startTime}s] ${segment.speaker ? `${segment.speaker}: ` : ''}${segment.text}`
).join('\n\n')}

Generated by PodcastSummarizer`;
  };

  const copyToClipboard = async (text: string, itemName: string) => {
    try {
      await navigator.clipboard.writeText(text);
      setCopiedItem(itemName);
      setTimeout(() => setCopiedItem(null), 2000);
    } catch (error) {
      console.error('Failed to copy to clipboard:', error);
    }
  };

  const downloadFile = (content: string, filename: string) => {
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const shareData = async () => {
    const summaryText = generateSummaryText();
    
    if (navigator.share) {
      try {
        await navigator.share({
          title: `${podcastData.episode.title} - Summary`,
          text: summaryText,
        });
      } catch (error) {
        console.error('Error sharing:', error);
      }
    } else {
      copyToClipboard(summaryText, 'summary');
    }
  };

  return (
    <div className="bg-white rounded-3xl shadow-sm border border-gray-100 p-8">
      <div className="flex items-center space-x-3 mb-8">
        <div className="w-10 h-10 bg-gray-100 rounded-2xl flex items-center justify-center">
          <Download className="w-5 h-5 text-gray-600" />
        </div>
        <h3 className="text-xl font-medium text-gray-900">Export & Share</h3>
      </div>

      <div className="grid sm:grid-cols-2 gap-4">
        {/* Copy Summary */}
        <button
          onClick={() => copyToClipboard(generateSummaryText(), 'summary')}
          className="flex items-center justify-center space-x-3 p-6 border border-gray-200 rounded-2xl hover:border-blue-300 hover:bg-blue-50 transition-all duration-300 group"
        >
          <Copy className="w-5 h-5 text-gray-500 group-hover:text-blue-600" />
          <span className="font-light text-gray-700 group-hover:text-blue-700">
            {copiedItem === 'summary' ? 'Copied!' : 'Copy Summary'}
          </span>
        </button>

        {/* Download Summary */}
        <button
          onClick={() => downloadFile(generateSummaryText(), `${podcastData.episode.title}-summary.txt`)}
          className="flex items-center justify-center space-x-3 p-6 border border-gray-200 rounded-2xl hover:border-green-300 hover:bg-green-50 transition-all duration-300 group"
        >
          <FileText className="w-5 h-5 text-gray-500 group-hover:text-green-600" />
          <span className="font-light text-gray-700 group-hover:text-green-700">
            Download Summary
          </span>
        </button>

        {/* Copy Full Transcript */}
        <button
          onClick={() => copyToClipboard(generateFullTranscript(), 'transcript')}
          className="flex items-center justify-center space-x-3 p-6 border border-gray-200 rounded-2xl hover:border-purple-300 hover:bg-purple-50 transition-all duration-300 group"
        >
          <Copy className="w-5 h-5 text-gray-500 group-hover:text-purple-600" />
          <span className="font-light text-gray-700 group-hover:text-purple-700">
            {copiedItem === 'transcript' ? 'Copied!' : 'Copy Transcript'}
          </span>
        </button>

        {/* Share */}
        <button
          onClick={shareData}
          className="flex items-center justify-center space-x-3 p-6 border border-gray-200 rounded-2xl hover:border-orange-300 hover:bg-orange-50 transition-all duration-300 group"
        >
          <Share className="w-5 h-5 text-gray-500 group-hover:text-orange-600" />
          <span className="font-light text-gray-700 group-hover:text-orange-700">
            Share Summary
          </span>
        </button>
      </div>

      <div className="mt-8 p-6 bg-gray-50 rounded-2xl">
        <h4 className="font-medium text-gray-800 mb-3">Export Formats</h4>
        <div className="text-sm text-gray-600 font-light space-y-2">
          <p>• <strong className="font-medium">Summary:</strong> Overview + key points + highlights</p>
          <p>• <strong className="font-medium">Transcript:</strong> Full text with timestamps and speakers</p>
          <p>• <strong className="font-medium">Share:</strong> Uses native sharing when available</p>
        </div>
      </div>
    </div>
  );
}